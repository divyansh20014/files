<choice>
    <when>
        <!-- Check if the Action is a Fund Transfer action code -->
        <simple>${body.Data.Action} in ['ASM', 'ASB', 'AYQC', 'ATAFT', 'AMEX', 'IOL', 'ITWU', 'ITWA', 'OBCCP', 'FTAB', 'FTAA']</simple>
        <to ref="fundTransferBean" />
    </when>
    <when>
        <!-- Check if the Action is a Bill Payment action code -->
        <simple>${body.Data.Action} in BPAAADC, BPAADDC, BPADEWA, BPADU, BPAEMP, BPAETI, BPAFEWA, BPAFD, BPAIBP, BPANOL, BPASAL, BPASF, BPASEWA, BSAADC, BSADDC, BSDEWA, BSDU, BSEMP, BSETI, BSFEWA, BSFD, BSIBP, BSNOL, BSSAL, BSSF, BSSEWA, BPRAADC, BPRADDC, BPRDEWA, BPRDU, BPREMP, BPRETI, BPRFEWA, BPRFD, BPRIBL, BPRNOL, BPRSAL, BPRSF, BPRSEWA
</simple>
        <to ref="billPaymentBean" />
    </when>
    <otherwise>
        <!-- Log and return unsupported action if no match -->
        <log message="Unsupported action: ${body.Data.Action}" />
        <setBody>
            <simple>Unsupported action</simple>
        </setBody>
        <setHeader headerName="CamelHttpResponseCode">
            <simple>400</simple>
        </setHeader>
    </otherwise>
</choice>

<!-- for Non Financial-->
<choice>
    <when>
        <!-- Check if the Action is a Customer Details Update action code -->
        <simple>${body.Data.Action} in ['AFP', 'EIC', 'CDP']</simple>
        <bean ref="customerDetailsUpdate" method="jsonMapping"/>
    </when>
    <when>
        <!-- Check if the Action is a Password Management action code -->
        <simple>${body.Data.Action} in ['CP', 'FPI', 'FP']</simple>
        <bean ref="passwordManagement" method="jsonMapping"/>
    </when>
    <when>
        <!-- Check if the Action is a Beneficiary Management action code -->
        <simple>${body.Data.Action} in ['BC', 'BM']</simple>
        <bean ref="beneficiaryManagement" method="jsonMapping"/>
    </when>
    <when>
        <!-- Check if the Action is a Registration action code -->
        <simple>${body.Data.Action} in ['MDR', 'REGC', 'REGI']</simple>
        <bean ref="registration" method="jsonMapping"/>
    </when>
    <when>
        <!-- Check if the Action is for Authentication -->
        <simple>${body.Data.Action} == 'IBLGN'</simple>
        <bean ref="authentication" method="jsonMapping"/>
    </when>
    <otherwise>
        <!-- Log and return unsupported action if no match -->
        <log message="Unsupported action: ${body.Data.Action}" />
        <setBody>
            <simple>Unsupported action</simple>
        </setBody>
        <setHeader headerName="CamelHttpResponseCode">
            <simple>400</simple>
        </setHeader>
    </otherwise>
</choice>


public static void send(LengthCodec lc, Transaction txn) throws Exception {
    // Step 1: Get the complete message as bytes before sending
    byte[] txnBytes = txn.encode();  // Assuming txn.encode() returns the full byte array of the transaction
    
    // Step 2: Print the complete transaction byte array in hexadecimal format for readability
    System.out.println("Final transaction data being sent (Hex format): " + bytesToHex(txnBytes));
    
    // Step 3: Write the length of the transaction (length prefix)
    lc.writeLength(outputStream, txn.getLength());

    // Step 4: Write each segment of the transaction to the output stream
    for (SegmentType type : SegmentType.values()) {
        byte[] bytes = txn.getSegment(type);
        if (bytes != null) {
            outputStream.write(bytes, 0, bytes.length);  // Write the segment to the output stream
        }
    }

    // Step 5: Flush the output stream to send the data
    outputStream.flush();
}

// Utility function to convert byte array to hex format
public static String bytesToHex(byte[] bytes) {
    StringBuilder hexString = new StringBuilder();
    for (byte b : bytes) {
        hexString.append(String.format("%02X ", b));  // Format each byte as a 2-character hex string
    }
    return hexString.toString();
}
